// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Creating a model schema for Author in prisma
model Author {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  image     String?
  startup   Startup[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("author")
}

model Startup {
  id              Int               @id @default(autoincrement())
  title           String
  slug            String            @unique
  authorId        Int
  views           Int
  description     String
  category        String
  image           String
  pitch           String
  author          Author            @relation(fields: [authorId], references: [id])
  playlistId      Int?
  playlistStartup PlaylistStartup[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("startup")
}

model Playlist {
  id        Int               @id @default(autoincrement())
  title     String
  slug      String            @unique
  startups  PlaylistStartup[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("playlist")
}

// This model is a JOIN table that represents a many to many relationship between Playlist and Startup
model PlaylistStartup {
  playlistId Int
  starupId   Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  startup    Startup  @relation(fields: [starupId], references: [id])

  // Composite primary key to ensure uniqueness
  @@id([playlistId, starupId])
}
